/binary search method  to find a key element 
#include <iostream>
using namespace std;
int binarysearch(int arr[],int size,int key){
  int start=0;
  int end=size-1;
  int mid;
 
  while(start<=end){
     mid=(start+end)/2;
    if(arr[mid]==key){
      return mid;
    }
    else if(arr[mid]<key){
      start=mid+1;
    }
    else{
      end=mid-1;
    }
  }
  return -1;
}
int main(){
   int arr[8]={2,4,6,8,10,12,14,16};
   int key;
    cin>>key;
   int b=binarysearch(arr,8,key);
   cout<<b;

  return 0;
}
 //first and last occurence of an element
 #include <iostream>
using namespace std;
int firstoccurrence(int arr[],int size,int key){
  int s=0;
  int e=size-1;
  int ans=0;
  int mid;
  while(s<=e){
    mid=s+(e-s)/2;
    if(arr[mid]==key){
       ans=mid;
       e=mid-1;
    }
    else if(arr[mid]<key){
      s=mid+1;
    }
    else if(arr[mid]>key){
      e=mid-1;
    }
  }
  return ans;
}
int lastoccurrence(int arr[],int size,int key){
  int s=0;
  int e=size-1;
  int ans=0;
  int mid;
  while(s<=e){
      mid=s+(e-s)/2;
    if(arr[mid]==key){
      ans=mid;
      s=mid+1;
    }
    else if(arr[mid]>key){
      e=mid-1;
    }
    else if(arr[mid]<key){
      s=mid+1;
    }
  }
  return ans;
}
int main(){
   int arr[8]={2,4,4,4,4,6,8,8};
   int key;
   cin>>key;
   int b=firstoccurrence(arr,8,key);
   int c=lastoccurrence(arr,8,key);
   cout<<"first occurence"<<b<<endl;
   cout<<"last occurrence"<<c<<endl;
  return 0;
}

/peak element of the std::array<T, N> ;, N> ;
#include <iostream>

using namespace std;

int peakelement(int arr[],int size){
    int s=0;
    int e=size-1;
    int mid;
    while(s<e){
        mid=s+(e-s)/2;
          if(arr[mid]<arr[mid+1]){
              s=mid+1;
          }
          else{
              e=mid;
          }
    }
    return s;
}
int main()
{
    int arr[5]={2,4,5,7,1};
     int b= peakelement(arr,5);
     cout<<b;
    return 0;
}
